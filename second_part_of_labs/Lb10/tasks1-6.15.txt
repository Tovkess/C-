#include <iostream>
#include <vector>
#include <limits>
using namespace std;

void task1() {
    int m = 4, n = 3;
    int arr[m][n] = {{40, -3, 47}, {6, 7, 8}, {-2, -11, 5}, {1, -8, 16}};
    
    for (int i = 0; i < m; ++i) {
        int evenCount = 0;
        for (int j = 0; j < n; ++j) {
            if (arr[i][j] % 2 == 0) evenCount++;
        }
        cout << "Row " << i + 1 << " has " << evenCount << " even numbers." << endl;
    }
}

void task2() {
    int m = 6, n = 4;
    int arr[m][n] = {{-4, 0, 33, 88}, {6, -6, 2, 0}, {9, 10, 11, 12}, {13, 14, 15, 16}, {17, 18, 19, 20}, {21, 22, 23, 24}};

    for (int j = 0; j < n; ++j) {
        int evenCount = 0;
        for (int i = 0; i < m; ++i) {
            if (arr[i][j] % 2 == 0) evenCount++;
        }
        cout << "Column " << j + 1 << " has " << evenCount << " even numbers." << endl;
    }
}

void task3() {
    int m = 5, n = 7;
    int arr[m][n] = {
        {1, 2, 3, 4, 5, 6, 7},
        {8, 9, 10, 11, 12, 13, 14},
        {15, 16, 17, 18, 19, 20, 21},
        {22, 23, 24, 25, 26, 27, 28},
        {29, 30, 31, 32, 33, 34, 35}
    };

    for (int i = 0; i < m; ++i) {
        int rowSum = 0;
        for (int j = 0; j < n; ++j) {
            rowSum += arr[i][j];
        }
        cout << "Row " << i + 1 << " sum: " << rowSum << endl;
    }
}

void task4() {
    int m = 4, n = 6;
    int arr[m][n] = {
        {1, 2, 3, 4, 5, 6},
        {7, 8, 9, 10, 11, 12},
        {13, 14, 15, 16, 17, 18},
        {19, 20, 21, 22, 23, 24}
    };

    for (int j = 0; j < n; ++j) {
        int colSum = 0;
        for (int i = 0; i < m; ++i) {
            colSum += arr[i][j];
        }
        cout << "Column " << j + 1 << " sum: " << colSum << endl;
    }
}

void task5() {
    int m = 3, n = 4;
    int arr[m][n] = {
        {1, 2, 3, 4},
        {5, 6, 7, 8},
        {9, 10, 11, 12}
    };

    int maxValue = numeric_limits<int>::min();
    int maxRow = -1, maxCol = -1;

    for (int i = 0; i < m; ++i) {
        for (int j = 0; j < n; ++j) {
            if (arr[i][j] > maxValue) {
                maxValue = arr[i][j];
                maxRow = i;
                maxCol = j;
            }
        }
    }
    cout << "Max value: " << maxValue << " at position (" << maxRow + 1 << ", " << maxCol + 1 << ")" << endl;
}

void task6() {
    int m = 4, n = 7;
    int arr[m][n] = {
        {10, 20, 30, 40, 50, 60, 70},
        {15, 25, 35, 45, 55, 65, 75},
        {5, 7, 9, 11, 13, 15, 17},
        {6, 8, 10, 12, 14, 16, 18}
    };

    int minValue = numeric_limits<int>::max();
    int minRow = -1, minCol = -1;

    for (int i = 0; i < m; ++i) {
        for (int j = 0; j < n; ++j) {
            if (arr[i][j] < minValue) {
                minValue = arr[i][j];
                minRow = i;
                minCol = j;
            }
        }
    }
    cout << "Min value: " << minValue << " at position (" << minRow + 1 << ", " << minCol + 1 << ")" << endl;
}

void task15() {
    int m = 3, n = 3;
    int arr[m][n] = {
        {9, 29, -8},
        {4, 5, 6},
        {7, 8, 9}
    };

    int mainDiagonalSum = 0, secondaryDiagonalSum = 0;

    for (int i = 0; i < m; ++i) {
        mainDiagonalSum += arr[i][i];
        secondaryDiagonalSum += arr[i][n - i - 1];
    }

    cout << "Main diagonal sum: " << mainDiagonalSum << endl;
    cout << "Secondary diagonal sum: " << secondaryDiagonalSum << endl;
}

int main() {
    cout << "Task 1:" << endl;
    task1();

    cout << "\nTask 2:" << endl;
    task2();

    cout << "\nTask 3:" << endl;
    task3();

    cout << "\nTask 4:" << endl;
    task4();

    cout << "\nTask 5:" << endl;
    task5();

    cout << "\nTask 6:" << endl;
    task6();

    cout << "\nTask 15:" << endl;
    task15();

    return 0;
}
